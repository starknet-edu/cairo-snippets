{
	"Storage var": {
		"prefix": [
			"storage",
			"@storage",
			"@storage_var",
			"stor"
		],
		"body": [
			"@storage_var",
			"func ${1:name}(${2:key}) -> (${3:value}):",
			"end"
		],
		"description": "Defines a storage variable"
	},
	"External function definition": {
		"prefix": [
			"external",
			"@external",
			"ext",
			"exte",
			"@ext",
			"@exte"
		],
		"body": [
			"@external",
			"func ${1:name}{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(${2:params}) -> (${3:returns}):",
			"return (${4:res})",
			"end"
		],
		"description": "Defines an external function"
	},
	"Internal function definition": {
		"prefix": [
			"func",
			"def",
			"function",
			"fun"
		],
		"body": [
			"func ${1:name}{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(${2:params}) -> (${3:returns}):",
			"return (${4:res})",
			"end"
		],
		"description": "Defines an internal function"
	},
	"View definition": {
		"prefix": [
			"view",
			"vi",
			"@view",
			"@vi"
		],
		"body": [
			"@view",
			"func view_${1:name}{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr}(${2:params}) -> (${3:returns}):",
			"return (${4:res})",
			"end"
		],
		"description": "Defines a view"
	},
	"Event definition": {
		"prefix": [
			"event",
			"ev",
			"@event",
			"@ev"
		],
		"body": [
			"@event",
			"func ${1:name}(${2:params}):",
			"end"
		],
		"description": "Defines an event"
	},
	"Struct": {
		"prefix": [
			"struct"
		],
		"body": [
			"struct ${1:name}:",
			"    member ${4:first_member} : ${5:felt}",
			"    member ${6:second_member} : ${7:felt}",
			"end"
		],
		"description": "Defines a struct"
	},
	"Documentation": {
		"prefix": [
			"doc",
			"do"
		],
		"body": [
			"# @notice ${1:explanation}",
			"# @dev ${2:remark}",
			"# @param ${3:param1}: ${4:param1Description}",
			"# @param ${5:param2}: ${6:param2Description}",
			"# @return ${7: return1}: ${8: return1Description}",
			"# @return ${9: return1}: ${10: return1Description}"
		],
		"description": "Documents a method"
	}
}
